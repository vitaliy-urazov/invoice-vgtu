<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        initialize="onInit(event)" horizontalCenter="true">
    <fx:Script><![CDATA[
        import flash.display.Bitmap;
        import flash.display.Bitmap;

        import mx.controls.Alert;

        import mx.graphics.codec.JPEGEncoder;

        import mx.graphics.codec.PNGEncoder;

        import org.qrcode.QRCode;

        import stimulsoft.flex.data.DataColumn;
        import stimulsoft.flex.data.DataRow;
        import stimulsoft.flex.data.DataSet;
        import stimulsoft.flex.data.DataTable;
        import stimulsoft.flex.data.StorageType;
        import stimulsoft.flex.serialize.StiTypeConverter;
        import stimulsoft.report.StiOptions;
        import stimulsoft.report.StiReport;
        import stimulsoft.report.components.simpleComponents.StiImage;
        import stimulsoft.report.dictionary.StiVariable;
        import stimulsoft.viewer.StiViewerFx;
        import stimulsoft.base.settings.StiSettings;
        import stimulsoft.base.localization.StiLanguage;
        import stimulsoft.base.localization.StiLocalization;



        [Embed(source="/invoice_template.mrt", mimeType="application/octet-stream")]
        public static var template:Class;
        public static var templateObj:String = String(new template as ByteArray);

        [Embed(source="/ru.xml", mimeType="application/octet-stream")]
        public static var rusclass:Class;
        public static var rusLang:String = String(new rusclass as ByteArray);

        private function onInit(e:Event):void {
            StiViewerFx.initialize();

            StiOptions.viewer.toolbar.showOpenButton = false;
            StiOptions.viewer.toolbar.showAboutButton = false;
            StiOptions.viewer.toolbar.showBookmarksButton = false;
            StiOptions.viewer.toolbar.showFindButton = false;
            StiOptions.viewer.toolbar.showChangeThemeButton = false;
            StiOptions.viewer.toolbar.showFullScreenButton = false;
            StiOptions.viewer.exports.showExportToDocument = false;
            StiOptions.viewer.exports.showExportToCsv = false;
            StiOptions.viewer.exports.showExportToRtf = false;
            StiOptions.viewer.exports.showExportToPdf = true;
            StiOptions.viewer.exports.showExportToText = false;

            // Create Language object
            var language:StiLanguage = StiLanguage.fromString(rusLang);
            // Set Localization
            StiLocalization.setLanguage(language);

            StiSettings.setValue("Export", "PdfSettings.ImageResolution", 100);  // 10, 25, 50, 75, 100, 150, 200, 300, 400, 500
            StiSettings.setValue("Export", "PdfSettings.ImageCompressionMethod", "Jpeg");  // Jpeg, Flate
            StiSettings.setValue("Export", "PdfSettings.ImageQuality", 85);  // 1...100
            StiSettings.setValue("Export", "PdfSettings.StandardPDFFonts", false);
            StiSettings.setValue("Export", "PdfSettings.EmbeddedFonts", false);
            StiSettings.setValue("Export", "PdfSettings.UseUnicode", false);
            StiSettings.setValue("Export", "PdfSettings.Compressed", true);
            StiSettings.setValue("Export", "PdfSettings.ExportRtfTextAsImage", false);
            StiSettings.setValue("Export", "PdfSettings.PdfACompliance", false);

            StiSettings.save();

//            if(ExternalInterface.available){
//                ExternalInterface.addCallback("setImage", generateInvoice);
//            }else{
//                Alert.show('ExternalInterface (((')
//            }
        }

        public function getQRCode(event:Event):void{
            var qrcodestr:String = 'ST00012|Name=УФК по Воронежской области (Отдел №34 УФК по Воронежской области ФГБОУ ВО "ВГТУ") л/с 20316X73120|' +
                    'PersonalAcc=40501810920072000002|' +
                    'BankName=Отделение Воронеж|' +
                    'BIC=042007001|' +
                    'CorrespAcc=00000000000000000000|' +
                    'PayeeINN=3662020886|' +
                    'Sum='+Number(this.summa.text)*100+'|' +
                    'LastName='+this.lname.text+'|' +
                    'FirstName='+this.fname.text+'|' +
                    'MiddleName='+this.mname.text+'|' +
                    'INSTNUM='+this.fakult.text+'|' +
                    'PENSACC='+this.group.text+'|' +
                    'Purpose='+this.reason.text+'|' +
                    'OKATO=20701000|' +
                    'CBC=81530201020020000130';

            this.generateInvoice(qrcodestr);

//            qrcodestr = "http://api.qrserver.com/v1/create-qr-code/?data="+encodeURIComponent(qrcodestr)+"&size=150x150";
////            qrcodestr = encodeURIComponent(qrcodestr);
//            if(ExternalInterface.available){
//                ExternalInterface.call("loadQRCodeImage", qrcodestr);
//            }else{
//                Alert.show('ExternalInterface (((')
//            }

//            row.setValue("qrcode", qrcodestr);

//            var qrEncode:QRCode = new QRCode();
//            qrEncode.encode(qrcodestr);
//            row.setValue("qrcodeimg", new Bitmap(qrEncode.bitmapData));

//            var png: PNGEncoder = new PNGEncoder();
//            var bytes: ByteArray = png.encode(qrEncode.bitmapData);  // byteArrayContent in your case, should be BitmapData
//            var content:String = StiTypeConverter.byteArrayToBase64(bytes);


        }

        public function generateInvoice(data:String):void {
            var table:DataTable = new DataTable("info");
            var column:DataColumn = new DataColumn("fname", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("lname", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("mname", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("fakult", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("group", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("reason", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("summa", StorageType.StringType);
            table.columns.add(column);
            column = new DataColumn("qrcodeimg", StorageType.ByteArrayType);
            table.columns.add(column);
            column = new DataColumn("qrcode", StorageType.ByteArrayType);
            table.columns.add(column);

            var row:DataRow;
            row = table.addNewRow();

            row.setValue("lname", this.lname.text);
            row.setValue("fname", this.fname.text);
            row.setValue("mname", this.mname.text);
            row.setValue("fakult", this.fakult.text);
            row.setValue("group", this.group.text);
            row.setValue("reason", this.reason.text);
            row.setValue("summa", this.summa.text);
            row.setValue("qrcode", data);


            var dataSet:DataSet = new DataSet("DataSetName");
            dataSet.tables.add(table);

            var report:StiReport = new StiReport();
            report.loadReportFromString(templateObj);
            report.regDataSet("DataSetName", "DataSetName", dataSet);
//            report.dictionary.variables['qrimg'].value = content;

//            for each (var variable: StiVariable in report.dictionary.variables)
//            {
//                trace (variable.name );
//            }


//            var variable: StiVariable = report.dictionary.variables.getByName("qrimg");
//            variable.valueObject = bytes;


//            var img: StiImage = report.getComponentByName("Image2") as StiImage;
////            img.image = StiTypeConverter.byteArrayToBase64(bytes);
//            img.image = data;

            report.dictionary.synchronize();

            report.showDialog();

        }

        ]]></fx:Script>

    <fx:Style source="styles.css"/>

    <s:layout>
        <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"></s:VerticalLayout>
    </s:layout>


    <s:Form width="600">

        <s:layout>
            <s:FormLayout gap="-10"/>
        </s:layout>

        <s:FormHeading label="Формирование платежки" fontSize="20"/>

        <s:FormItem label="Фамилия" percentWidth="100">
            <s:TextInput id="lname" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem label="Имя" percentWidth="100">
            <s:TextInput id="fname" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem label="Отчество" percentWidth="100">
            <s:TextInput id="mname" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem label="Факультет" percentWidth="100">
            <s:TextInput id="fakult" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem label="Группа" percentWidth="100">
            <s:TextInput id="group" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem label="Назначение платежа" percentWidth="100">
            <s:TextInput id="reason" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem label="Сумма платежа" percentWidth="100">
            <s:TextInput id="summa" restrict="0123456789" percentWidth="100"/>
        </s:FormItem>
        <s:FormItem>
            <s:Button click="getQRCode(event);" label="Сформировать платежку"/>
        </s:FormItem>
    </s:Form>


    <s:HGroup verticalAlign="middle" width="600" horizontalAlign="left" paddingTop="70">

        <s:Image source="logo.jpg" width="70" height="70"/>
        <s:Rect width="10"/>
        <s:Label percentWidth="100" maxDisplayedLines="10"  lineBreak="toFit"
                 text="Отдел технического и программного обеспечения информационных технологий"/>

    </s:HGroup>


</s:Application>
